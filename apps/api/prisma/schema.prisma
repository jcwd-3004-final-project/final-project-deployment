// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int     @id @default(autoincrement())
  email        String  @unique
  password     String?
  first_name   String
  last_name    String
  phone_number String?
  role         Role    @default(USER)
  isVerified   Boolean @default(false)
  googleId     String?
  facebookId   String?
  avatar       String?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  last_activity DateTime @default(now()) // Added default value

  addresses     Address[]
  orders        Order[]
  cart          Cart?
  userVouchers  UserVoucher[]
  tokens        Token[]
  referralsMade Referral[]    @relation("Referrer")
  referrals     Referral[]    @relation("Referred")

  // For store admins
  store   Store? @relation(fields: [storeId], references: [store_id])
  storeId Int?
}

model Address {
  address_id  Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  addressLine String?
  city        String?
  state       String?
  postalCode  String?
  country     String?
  latitude    Float
  longitude   Float
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orders Order[]
}

model Store {
  store_id            Int      @id @default(autoincrement())
  name                String
  address             String
  city                String?
  state               String?
  postalCode          String?
  country             String?
  latitude            Float
  longitude           Float
  maxDeliveryDistance Float?
  store_admin         String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  storeAdmins   User[]
  storeProducts StoreProduct[]
  orders        Order[]
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  description   String
  price         Float
  category      Category       @relation(fields: [categoryId], references: [id])
  categoryId    Int
  images        Image[]
  stockQuantity Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  storeProducts StoreProduct[]  
  cartItems     CartItem[]
  orderItems    OrderItem[]
  discounts     Discount[]     @relation("ProductDiscounts")
  vouchers      Voucher[]      @relation("ProductVouchers")
  stockLogs     StockLog[]
}
model StockLog {
  id             Int      @id @default(autoincrement())
  productId      Int
  changeQuantity Int
  reason         String
  createdAt      DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
}

model Image {
  id        Int     @id @default(autoincrement())
 product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  url       String
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Discount {
  id          Int               @id @default(autoincrement())
  type        DiscountType
  value       Float // percentage or nominal amount
  valueType   DiscountValueType
  startDate   DateTime
  endDate     DateTime
  maxDiscount Float?
  minPurchase Float?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  products Product[] @relation("ProductDiscounts")
}

model StoreProduct {
  id        Int      @id @default(autoincrement())
  store     Store    @relation(fields: [storeId], references: [store_id])
  storeId   Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  stock     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stockAdjustments StockAdjustment[]
   @@unique([storeId, productId])
}

model StockAdjustment {
  id             Int                   @id @default(autoincrement())
  storeProduct   StoreProduct          @relation(fields: [storeProductId], references: [id])
  storeProductId Int
  adjustmentType AdjustmentType
  quantity       Int
  reason         StockAdjustmentReason
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                Int            @id @default(autoincrement())
  user              User           @relation(fields: [userId], references: [id])
  userId            Int
  store             Store          @relation(fields: [storeId], references: [store_id])
  storeId           Int
  status            OrderStatus    @default(WAITING_FOR_PAYMENT)
  items             OrderItem[]
  totalAmount       Float
  shippingCost      Float
  shippingAddress   Address        @relation(fields: [shippingAddressId], references: [address_id])
  shippingAddressId Int
  shippingMethod    ShippingMethod
  paymentProof      String?
  paymentMethod     PaymentMethod
  userVoucher       UserVoucher?   @relation(fields: [userVoucherId], references: [id])
  userVoucherId     Int?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Voucher {
  id                   Int               @id @default(autoincrement())
  code                 String            @unique
  discountType         DiscountType
  value                Float // percentage or nominal
  valueType            DiscountValueType
  startDate            DateTime
  endDate              DateTime
  maxDiscount          Float?
  minPurchaseAmount    Float?
  usageType            VoucherUsageType
  expiryDate           DateTime?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  userVouchers         UserVoucher[]
  products             Product[]         @relation("ProductVouchers")
}


model UserVoucher {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  voucher   Voucher   @relation(fields: [voucherId], references: [id])
  voucherId Int
  isUsed    Boolean   @default(false)
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  orders Order[]
}

model Referral {
  id           Int      @id @default(autoincrement())
  referrer     User     @relation("Referrer", fields: [referrerId], references: [id])
  referrerId   Int
  referred     User?    @relation("Referred", fields: [referredId], references: [id])
  referredId   Int?
  referralCode String   @unique
  createdAt    DateTime @default(now())
   usageCount   Int      @default(0)
}


model Token {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  token     String    @unique // Made token field unique
  type      TokenType
  expiresAt DateTime
  createdAt DateTime  @default(now())
}

enum Role {
  USER
  STORE_ADMIN
  SUPER_ADMIN
}

enum OrderStatus {
  WAITING_FOR_PAYMENT
  WAITING_FOR_PAYMENT_CONFIRMATION
  PROCESSING
  SHIPPED
  ORDER_CONFIRMED
  CANCELLED
}

enum PaymentMethod {
  TRANSFER
  PAYMENT_GATEWAY
}

enum AdjustmentType {
  INCREASE
  DECREASE
}

enum DiscountType {
  PRODUCT_DISCOUNT
  BUY_ONE_GET_ONE
  MIN_PURCHASE_DISCOUNT
}

enum DiscountValueType {
  PERCENTAGE
  NOMINAL
}

enum VoucherUsageType {
  PRODUCT
  TOTAL_PURCHASE
  SHIPPING
}

enum ShippingMethod {
  REGULAR
  EXPRESS
  OVERNIGHT
}

enum StockAdjustmentReason {
  INITIAL_STOCK
  PURCHASE
  SALE
  RETURN
  DAMAGE
  LOSS
  TRANSFER
  CORRECTION
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  REFRESH_TOKEN // Added REFRESH_TOKEN
}
